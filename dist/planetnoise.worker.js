(()=>{var BaseNoise=class{constructor(seed=Date.now()){this.seedN=seed;this.seedK=seed;this.perm=new Uint8Array(512);this.seed(seed)}seed(seed){const random=this.xorshift(seed);for(let i=0;i<256;i++){this.perm[i]=i}for(let i=255;i>0;i--){const j=Math.floor(random()*(i+1));[this.perm[i],this.perm[j]]=[this.perm[j],this.perm[i]]}for(let i=0;i<256;i++){this.perm[i+256]=this.perm[i]}}setSeed(seed){this.seedN=seed;this.seed(seed);this.resetSeed()}random(x,y,z){let idx;if(typeof z==="number")idx=this.perm[(x&255)+this.perm[(y&255)+this.perm[z&255]]]&255;else idx=this.perm[(x&255)+this.perm[y&255]]&255;return this.perm[idx]/255*2-1}seededRandom(){this.seedK+=Math.E;const x=1e9*Math.sin(this.seedK);return x-Math.floor(x)}resetSeed(){this.seedK=this.seedN}xorshift(seed){let x=seed;return function(){x^=x<<13;x^=x>>17;x^=x<<5;return(x<0?1+~x:x)/4294967295}}dot(g,x=0,y=0,z=0){return g[0]*x+g[1]*y+g[2]*z}};var SimplexNoise3D=class extends BaseNoise{constructor(seed=Date.now()){super(seed);this.grad3=[[1,1,0],[-1,1,0],[1,-1,0],[-1,-1,0],[1,0,1],[-1,0,1],[1,0,-1],[-1,0,-1],[0,1,1],[0,-1,1],[0,1,-1],[0,-1,-1]];this.grad4=[[0,1,1,1],[0,1,1,-1],[0,1,-1,1],[0,1,-1,-1],[0,-1,1,1],[0,-1,1,-1],[0,-1,-1,1],[0,-1,-1,-1],[1,0,1,1],[1,0,1,-1],[1,0,-1,1],[1,0,-1,-1],[-1,0,1,1],[-1,0,1,-1],[-1,0,-1,1],[-1,0,-1,-1],[1,1,0,1],[1,1,0,-1],[1,-1,0,1],[1,-1,0,-1],[-1,1,0,1],[-1,1,0,-1],[-1,-1,0,1],[-1,-1,0,-1],[1,1,1,0],[1,1,-1,0],[1,-1,1,0],[1,-1,-1,0],[-1,1,1,0],[-1,1,-1,0],[-1,-1,1,0],[-1,-1,-1,0]]}dot(g,x,y,z){return g[0]*x+g[1]*y+g[2]*z}noise(xin,yin,zin){const F3=1/3;const G3=1/6;let n0,n1,n2,n3;const s=(xin+yin+zin)*F3;const i=Math.floor(xin+s);const j=Math.floor(yin+s);const k=Math.floor(zin+s);const t=(i+j+k)*G3;const X0=i-t;const Y0=j-t;const Z0=k-t;const x0=xin-X0;const y0=yin-Y0;const z0=zin-Z0;let i1,j1,k1;let i2,j2,k2;if(x0>=y0){if(y0>=z0){i1=1;j1=0;k1=0;i2=1;j2=1;k2=0}else if(x0>=z0){i1=1;j1=0;k1=0;i2=1;j2=0;k2=1}else{i1=0;j1=0;k1=1;i2=1;j2=0;k2=1}}else{if(y0<z0){i1=0;j1=0;k1=1;i2=0;j2=1;k2=1}else if(x0<z0){i1=0;j1=1;k1=0;i2=0;j2=1;k2=1}else{i1=0;j1=1;k1=0;i2=1;j2=1;k2=0}}const x1=x0-i1+G3;const y1=y0-j1+G3;const z1=z0-k1+G3;const x2=x0-i2+2*G3;const y2=y0-j2+2*G3;const z2=z0-k2+2*G3;const x3=x0-1+3*G3;const y3=y0-1+3*G3;const z3=z0-1+3*G3;const ii=i&255;const jj=j&255;const kk=k&255;const gi0=this.perm[ii+this.perm[jj+this.perm[kk]]]%12;const gi1=this.perm[ii+i1+this.perm[jj+j1+this.perm[kk+k1]]]%12;const gi2=this.perm[ii+i2+this.perm[jj+j2+this.perm[kk+k2]]]%12;const gi3=this.perm[ii+1+this.perm[jj+1+this.perm[kk+1]]]%12;let t0=.6-x0*x0-y0*y0-z0*z0;if(t0<0)n0=0;else{t0*=t0;n0=t0*t0*this.dot(this.grad3[gi0],x0,y0,z0)}let t1=.6-x1*x1-y1*y1-z1*z1;if(t1<0)n1=0;else{t1*=t1;n1=t1*t1*this.dot(this.grad3[gi1],x1,y1,z1)}let t2=.6-x2*x2-y2*y2-z2*z2;if(t2<0)n2=0;else{t2*=t2;n2=t2*t2*this.dot(this.grad3[gi2],x2,y2,z2)}let t3=.6-x3*x3-y3*y3-z3*z3;if(t3<0)n3=0;else{t3*=t3;n3=t3*t3*this.dot(this.grad3[gi3],x3,y3,z3)}return 32*(n0+n1+n2+n3)}};var lookup=new Uint8Array([151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180]);var FastLanczosNoise3D=class extends BaseNoise{constructor(seed=Date.now()){super(seed)}cubicInterpolate(p0,p1,p2,p3,t){return p1+.5*t*(p2-p0+t*(2*p0-5*p1+4*p2-p3+t*(3*(p1-p2)+p3-p0)))}noise(x,y,z){const ix=Math.floor(x);const iy=Math.floor(y);const iz=Math.floor(z);const dx=x-ix;const dy=y-iy;const dz=z-iz;const n000=this.random(ix-1,iy-1,iz-1);const n100=this.random(ix+0,iy-1,iz-1);const n200=this.random(ix+1,iy-1,iz-1);const n300=this.random(ix+2,iy-1,iz-1);const n010=this.random(ix-1,iy+0,iz-1);const n110=this.random(ix+0,iy+0,iz-1);const n210=this.random(ix+1,iy+0,iz-1);const n310=this.random(ix+2,iy+0,iz-1);const n020=this.random(ix-1,iy+1,iz-1);const n120=this.random(ix+0,iy+1,iz-1);const n220=this.random(ix+1,iy+1,iz-1);const n320=this.random(ix+2,iy+1,iz-1);const n030=this.random(ix-1,iy+2,iz-1);const n130=this.random(ix+0,iy+2,iz-1);const n230=this.random(ix+1,iy+2,iz-1);const n330=this.random(ix+2,iy+2,iz-1);const n001=this.random(ix-1,iy-1,iz+0);const n101=this.random(ix+0,iy-1,iz+0);const n201=this.random(ix+1,iy-1,iz+0);const n301=this.random(ix+2,iy-1,iz+0);const n011=this.random(ix-1,iy+0,iz+0);const n111=this.random(ix+0,iy+0,iz+0);const n211=this.random(ix+1,iy+0,iz+0);const n311=this.random(ix+2,iy+0,iz+0);const n021=this.random(ix-1,iy+1,iz+0);const n121=this.random(ix+0,iy+1,iz+0);const n221=this.random(ix+1,iy+1,iz+0);const n321=this.random(ix+2,iy+1,iz+0);const n031=this.random(ix-1,iy+2,iz+0);const n131=this.random(ix+0,iy+2,iz+0);const n231=this.random(ix+1,iy+2,iz+0);const n331=this.random(ix+2,iy+2,iz+0);const n002=this.random(ix-1,iy-1,iz+1);const n102=this.random(ix+0,iy-1,iz+1);const n202=this.random(ix+1,iy-1,iz+1);const n302=this.random(ix+2,iy-1,iz+1);const n012=this.random(ix-1,iy+0,iz+1);const n112=this.random(ix+0,iy+0,iz+1);const n212=this.random(ix+1,iy+0,iz+1);const n312=this.random(ix+2,iy+0,iz+1);const n022=this.random(ix-1,iy+1,iz+1);const n122=this.random(ix+0,iy+1,iz+1);const n222=this.random(ix+1,iy+1,iz+1);const n322=this.random(ix+2,iy+1,iz+1);const n032=this.random(ix-1,iy+2,iz+1);const n132=this.random(ix+0,iy+2,iz+1);const n232=this.random(ix+1,iy+2,iz+1);const n332=this.random(ix+2,iy+2,iz+1);const n003=this.random(ix-1,iy-1,iz+2);const n103=this.random(ix+0,iy-1,iz+2);const n203=this.random(ix+1,iy-1,iz+2);const n303=this.random(ix+2,iy-1,iz+2);const n013=this.random(ix-1,iy+0,iz+2);const n113=this.random(ix+0,iy+0,iz+2);const n213=this.random(ix+1,iy+0,iz+2);const n313=this.random(ix+2,iy+0,iz+2);const n023=this.random(ix-1,iy+1,iz+2);const n123=this.random(ix+0,iy+1,iz+2);const n223=this.random(ix+1,iy+1,iz+2);const n323=this.random(ix+2,iy+1,iz+2);const n033=this.random(ix-1,iy+2,iz+2);const n133=this.random(ix+0,iy+2,iz+2);const n233=this.random(ix+1,iy+2,iz+2);const n333=this.random(ix+2,iy+2,iz+2);const col00=this.cubicInterpolate(n000,n100,n200,n300,dx);const col10=this.cubicInterpolate(n010,n110,n210,n310,dx);const col20=this.cubicInterpolate(n020,n120,n220,n320,dx);const col30=this.cubicInterpolate(n030,n130,n230,n330,dx);const col01=this.cubicInterpolate(n001,n101,n201,n301,dx);const col11=this.cubicInterpolate(n011,n111,n211,n311,dx);const col21=this.cubicInterpolate(n021,n121,n221,n321,dx);const col31=this.cubicInterpolate(n031,n131,n231,n331,dx);const col02=this.cubicInterpolate(n002,n102,n202,n302,dx);const col12=this.cubicInterpolate(n012,n112,n212,n312,dx);const col22=this.cubicInterpolate(n022,n122,n222,n322,dx);const col32=this.cubicInterpolate(n032,n132,n232,n332,dx);const col03=this.cubicInterpolate(n003,n103,n203,n303,dx);const col13=this.cubicInterpolate(n013,n113,n213,n313,dx);const col23=this.cubicInterpolate(n023,n123,n223,n323,dx);const col33=this.cubicInterpolate(n033,n133,n233,n333,dx);const row0=this.cubicInterpolate(col00,col10,col20,col30,dy);const row1=this.cubicInterpolate(col01,col11,col21,col31,dy);const row2=this.cubicInterpolate(col02,col12,col22,col32,dy);const row3=this.cubicInterpolate(col03,col13,col23,col33,dy);let result=this.cubicInterpolate(row0,row1,row2,row3,dz);return result}};var LanczosBillowNoise=class extends FastLanczosNoise3D{generateNoise(x,y,z,zoom=1,octaves=6,lacunarity=2,gain=.5,shift=0,freq=1){x/=zoom;y/=zoom;z/=zoom;let sum=0;let maxAmp=0;let amp=1;let angle=this.seedN*2*Math.PI;const angleIncrement=Math.PI/4;for(let i=0;i<octaves;i++){const noiseValue=this.noise(x*freq,y*freq,z*freq);sum+=(2*Math.abs(noiseValue)-1)*amp;maxAmp+=amp;freq*=lacunarity;amp*=gain;const cosAngle=Math.cos(angle);const sinAngle=Math.sin(angle);let newX=x*cosAngle-y*sinAngle;let newY=x*sinAngle+y*cosAngle;let newZ=z;let rotatedX=newX*cosAngle+newZ*sinAngle;let rotatedZ=-newX*sinAngle+newZ*cosAngle;newX=rotatedX;newZ=rotatedZ;let rotatedY=newY*cosAngle-newZ*sinAngle;rotatedZ=newY*sinAngle+newZ*cosAngle;newY=rotatedY;newZ=rotatedZ;x=newX;y=newY;z=newZ;angle+=angleIncrement;x+=shift;y+=shift;z+=shift}sum/=maxAmp;return sum}};var RidgedMultifractalNoise=class extends FastLanczosNoise3D{generateNoise(x,y,z,zoom=1,octaves=6,lacunarity=2,gain=.75,shift=0,exp1=3,exp2=1){x/=zoom;y/=zoom;z/=zoom;let sum=1-Math.abs(this.noise(x,y,z));let amp=1;let angle=this.seedN*2*Math.PI;let angleIncr=Math.PI/4;for(let i=1;i<octaves;i++){x*=lacunarity;y*=lacunarity;z*=lacunarity;amp*=gain;let noise=Math.abs(this.noise(x,y,z));let noiseValue=1-Math.pow(noise,exp2);noiseValue=Math.pow(noiseValue,exp1);sum-=noiseValue*amp;let lastX;x=x*Math.cos(angle)+x*Math.sin(angle);y=y*Math.sin(angle)+y*Math.cos(angle);z=z*Math.sin(angle)+z*Math.cos(angle);angle+=angleIncr;x+=shift;y+=shift;z+=shift}return-sum}};var FractalBrownianMotion=class extends SimplexNoise3D{fbm(x,y,z,zoom=1,octaves=6,lacunarity=2,gain=.5,shift=100,frequency=1){x/=zoom;y/=zoom;z/=zoom;let sum=0;let amplitude=1;let maxValue=0;for(let i=0;i<octaves;i++){sum+=amplitude*this.noise(x*frequency,y*frequency,z*frequency);maxValue+=amplitude;frequency*=lacunarity;amplitude*=gain;x+=shift;y+=shift;z+=shift}return sum/maxValue}generateNoise(x,y,z,zoom=1,octaves=6,lacunarity=2,gain=.5,shift=100,frequency=1){let fbm1=this.fbm(x,y,z,zoom,octaves,lacunarity,gain,shift,frequency);let fbm2=this.fbm(fbm1*zoom,fbm1*zoom,fbm1*zoom,zoom,octaves,lacunarity,gain,shift,frequency);return fbm2}};var FractalBrownianMotion2=class extends SimplexNoise3D{fbm(x,y,z,zoom=1,octaves=6,lacunarity=2,gain=.5,shift=100,frequency=1){x/=zoom;y/=zoom;z/=zoom;let sum=0;let amplitude=1;let maxValue=0;for(let i=0;i<octaves;i++){sum+=amplitude*this.noise(x*frequency,y*frequency,z*frequency);maxValue+=amplitude;frequency*=lacunarity;amplitude*=gain;x+=shift;y+=shift;z+=shift}return sum/maxValue}generateNoise(x,y,z,zoom=1,octaves=6,lacunarity=2,gain=.5,shift=100,freq=1){let fbm1=this.fbm(x,y,z,zoom,octaves,lacunarity,gain,shift,freq);let fbm2=this.fbm(fbm1*zoom,fbm1*zoom,fbm1*zoom,zoom,octaves,lacunarity,gain,shift,freq);let fbm3=this.fbm(x+fbm2*zoom,y+fbm2*zoom,z+fbm2*zoom,zoom,octaves,lacunarity,gain,shift,freq);return fbm3}};if(typeof WorkerGlobalScope!=="undefined"&&self instanceof WorkerGlobalScope){const billow=new LanczosBillowNoise(12345);const ridged=new RidgedMultifractalNoise(12345);const fbm=new FractalBrownianMotion(12345);const fbm2=new FractalBrownianMotion2(12345);let useRidged=billow.seededRandom()-.5>0;let useFBM2=billow.seededRandom()-.5>0;self.onmessage=function(e){if(e.data.seed){billow.setSeed(e.data.seed);ridged.setSeed(e.data.seed);fbm.setSeed(e.data.seed);fbm2.setSeed(e.data.seed);useRidged=billow.seededRandom()-.5>0;useFBM2=billow.seededRandom()-.5>0;return}const{latRange,segments,offset,offset2,randomizer1,randomizer2,randomizer3,startIndex}=e.data;const{startLat,endLat}=latRange;const numValues=(endLat-startLat+1)*(segments+1);const noiseValues=new Float32Array(numValues);const coordinates=new Float32Array(numValues*3);let index=0;for(let lat=startLat;lat<=endLat;lat++){const theta=lat*Math.PI/segments;const poleScaleLat=Math.sin(theta);for(let lon=0;lon<=segments;lon++){const phi=lon*2*Math.PI/segments;const poleScaleLon=Math.sin(phi);const x=Math.sin(theta)*Math.cos(phi);const y=Math.sin(theta)*Math.sin(phi);const z=Math.cos(theta);const cIdx=index*3;coordinates[cIdx]=x;coordinates[cIdx+1]=y;coordinates[cIdx+2]=z;let noiseX=x+2+poleScaleLat*poleScaleLon*(offset*Math.sin(phi+theta)+offset2*Math.cos(2*phi));let noiseY=y+2+poleScaleLat*poleScaleLon*(offset*Math.cos(theta+phi)+offset2*Math.sin(2*theta));let noiseZ=z+2+poleScaleLat*poleScaleLon*(offset*Math.sin(2*phi+theta)+offset2*Math.cos(2*theta+phi));let zoomMul=1.3;const noiseValue=fbm.generateNoise(noiseX,noiseY,noiseZ,zoomMul*.8,6,randomizer3+2,.5,0,1)-(useFBM2?fbm2.generateNoise(noiseX,noiseY,noiseZ,randomizer3+zoomMul*1,8,2,.5,0,1):0)+(useRidged?ridged.generateNoise(noiseX,noiseY,noiseZ,randomizer1+zoomMul*.5,6,2,.5,0,1):0)+billow.generateNoise(noiseY,noiseX,noiseZ,randomizer2+zoomMul*.5,6,2,.5,0,1)*1.2-.2;noiseValues[index++]=noiseValue}}self.postMessage({noiseValues,coordinates,startIndex,fbm:true,fbm2:useFBM2,ridgedMultifractal:useRidged,billow:true},[noiseValues.buffer,coordinates.buffer])}}var planetnoise_worker_default=self;})();
